# coding=utf-8from extract_2D_kp import extract_sift_kp_from_RGB, sift_match, drawMatchesKnn_cv2, extract_sift_kp_from_grayimport cv2import timeclass Timer:    def __init__(self, on):        self.on = on        self.cur = time.time()    def tick(self, str=None):        if not self.on:            return        cur = time.time()        diff = cur - self.cur        self.cur = cur        if str is not None:            print(str, diff)        return diffif __name__ == '__main__':    root_path = "M:/PCL/normalmap/train_1/k6_20/"    img1 = cv2.imread(root_path + "normal_out_0560__k=6_dist=50000_diff=20_scale_1.0.png", -1)[120:220, 280:380]    img2 = cv2.imread(root_path + "normal_out_0570__k=6_dist=50000_diff=20_scale_1.0.png", -1)[100:240, 260:400]    bf = cv2.BFMatcher(cv2.NORM_L2)    sift = cv2.SIFT_create()    t = Timer(True)    # color_sift1, kp_xys1, des1 = extract_sift_kp_from_gray(img1)    # color_sift2, kp_xys2, des2 = extract_sift_kp_from_gray(img2)    kp_xys1, des1 = sift.detectAndCompute(img1, None)    kp_xys2, des2 = sift.detectAndCompute(img2, None)    t.tick('extract kp end')    # cv2.imshow('color_sift_1', color_sift1)    # cv2.imshow('color_sift_2', color_sift2)    # cv2.waitKey(0)    matches = bf.knnMatch(des1, des2, k=2)    t.tick('matcher end')    goodMatch = []    for m, n in matches:        if m.distance < 0.9 * n.distance:            goodMatch.append(m)    t.tick('match end')    drawMatchesKnn_cv2(color_sift1, kp_xys1, color_sift2, kp_xys2, goodMatch[:], True)    cv2.waitKey(0)    cv2.destroyAllWindows()